// Nextflow configuration file

// Global default params
params {
    // Input/Output
    bam_dir = "/home/ricky8419/09_Hereditary_cancer/00_rawdata/bam_markdup"
    output_dir = "/home/ricky8419/09_Hereditary_cancer/Results_germlineMode_nextflow"
    
    // Resources
    max_cpus = 64
    max_memory = '512.GB'
    max_time = '240.h'
    
    // Per-process defaults
    threads = 8
    memory = '64.GB'
}

// Process configuration
process {
    // Global process settings
    executor = 'local'
    
    // Parallel execution settings
    maxForks = 8  // 최대 8개 샘플 동시 처리
    
    // Error handling
    errorStrategy = 'retry'
    maxRetries = 2
    
    // Resource limits
    cpus = { check_max(params.threads, 'cpus') }
    memory = { check_max(params.memory, 'memory') }
    time = { check_max(4.h * task.attempt, 'time') }
    
    // Process-specific configurations
    withName: 'REDUX' {
        cpus = 8
        memory = '64.GB'
        time = '4.h'
        errorStrategy = 'retry'
        maxRetries = 2
    }
    
    withName: 'SAGE_PAVE' {
        cpus = 8
        memory = '64.GB'
        time = '6.h'
        errorStrategy = 'retry'
        maxRetries = 2
    }
    
    withName: 'AMBER_COBALT' {
        cpus = 8
        memory = '64.GB'
        time = '4.h'
        errorStrategy = 'retry'
        maxRetries = 2
    }
    
    withName: 'GRIDSS' {
        cpus = 8
        memory = '128.GB'
        time = '12.h'
        errorStrategy = 'retry'
        maxRetries = 2
    }
    
    withName: 'GRIPSS' {
        cpus = 4
        memory = '32.GB'
        time = '2.h'
        errorStrategy = 'retry'
        maxRetries = 2
    }
    
    withName: 'PURPLE' {
        cpus = 8
        memory = '64.GB'
        time = '4.h'
        errorStrategy = 'retry'
        maxRetries = 2
    }
    
    withName: 'LINX' {
        cpus = 4
        memory = '32.GB'
        time = '2.h'
        errorStrategy = 'retry'
        maxRetries = 2
    }
}

// Execution profiles
profiles {
    standard {
        process.executor = 'local'
        process.cpus = { check_max(8, 'cpus') }
        process.memory = { check_max(64.GB, 'memory') }
    }
    
    cluster {
        process.executor = 'slurm'
        process.queue = 'normal'
        process.clusterOptions = '--account=your_account'
    }
    
    docker {
        docker.enabled = true
        docker.runOptions = '-u $(id -u):$(id -g)'
    }
    
    singularity {
        singularity.enabled = true
        singularity.autoMounts = true
    }
}

// Reporting
timeline {
    enabled = true
    file = "${params.output_dir}/pipeline_info/timeline.html"
}

report {
    enabled = true
    file = "${params.output_dir}/pipeline_info/report.html"
}

trace {
    enabled = true
    file = "${params.output_dir}/pipeline_info/trace.txt"
}

dag {
    enabled = true
    file = "${params.output_dir}/pipeline_info/dag.svg"
}

// Manifest
manifest {
    name = 'hereditary-cancer-pipeline'
    author = 'Bioinformatics Team'
    homePage = 'https://github.com/your-repo/hereditary-cancer-pipeline'
    description = 'Nextflow pipeline for hereditary cancer germline analysis'
    mainScript = 'main.nf'
    nextflowVersion = '>=21.04.0'
    version = '1.0.0'
}

// Function to ensure that resource requirements don't go beyond a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
